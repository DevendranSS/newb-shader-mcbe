// __multiversion__

#include "vertexVersionCentroid.h"

#include "uniformWorldConstants.h"
#include "uniformEntityConstants.h"
#include "uniformPerFrameConstants.h"
#include "uniformBannerConstants.h"

#include "utilities/detectors.glsl"
#include "config_utilities/sky.h"
#include "config_utilities/mist_fog.h"

#include "config_utilities/global.h"

#ifdef USE_SKINNING
#include "uniformAnimationConstants.h"
#endif

attribute mediump vec4 POSITION;
attribute vec2 TEXCOORD_0;
attribute vec4 NORMAL;
attribute vec4 COLOR;

#if defined(USE_SKINNING)

#ifdef MCPE_PLATFORM_NX
    attribute uint BONEID_0;
#else
    attribute float BONEID_0;
#endif

#endif

#if __VERSION__ >= 300
    _centroid varying vec4 uv;
#else
    varying vec4 uv;
#endif

#ifdef ENABLE_FOG
    varying vec4 mistColor;
    varying vec4 fogColor;
#endif

#ifdef ENABLE_LIGHT
    varying vec4 light;
#endif

#ifndef DISABLE_TINTING
    varying vec4 color;
#endif

const float AMBIENT = 0.45;

const float XFAC = -0.1;
const float ZFAC = 0.1;

float lightIntensity(){
#ifdef FANCY

    #ifdef USE_SKINNING
        #if defined(LARGE_VERTEX_SHADER_UNIFORMS)
            vec3 N = normalize(BONES[int(BONEID_0)] * NORMAL).xyz;
        #else
            vec3 N = normalize(BONE * NORMAL).xyz;
        #endif
    #else
        vec3 N = normalize(WORLD * NORMAL).xyz;
    #endif

    N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light

    //take care of double sided polygons on materials without culling
    #ifdef FLIP_BACKFACES

        #ifdef USE_SKINNING
            #if defined(LARGE_VERTEX_SHADER_UNIFORMS)
                vec3 viewDir = normalize((BONES[int(BONEID_0)] * POSITION).xyz);
            #else
                vec3 viewDir = normalize((BONE * POSITION).xyz);
            #endif
        #else
            vec3 viewDir = normalize((WORLD * POSITION).xyz);
        #endif

        if( dot(N,viewDir) > 0.0 ){N *= -1.0;}

    #endif	//FLIP_BACKFACES

    //float yLight = (1.0+N.y) * 0.5;
    //return yLight*(1.0-AMBIENT) + N.x*N.x*XFAC + N.z*N.z*ZFAC + AMBIENT;

    N.xz *= N.xz;

    float light =  (0.5 + N.y*0.5)*(1.0-AMBIENT) + N.x*XFAC + N.z*ZFAC + AMBIENT;

    float lit = TILE_LIGHT_COLOR.b*TILE_LIGHT_COLOR.b*sun_intensity*1.2;

    return light*light*lit;

#else
    float lit = TILE_LIGHT_COLOR.b*TILE_LIGHT_COLOR.b*sun_intensity*1.2;
	return lit*(0.7+abs(NORMAL.y)*0.3)*(0.9+abs(NORMAL.x)*0.1);

#endif	//FANCY
}

void main()
{
#ifdef USE_SKINNING

#if defined(LARGE_VERTEX_SHADER_UNIFORMS)
    POS4 pos = WORLDVIEWPROJ * BONES[int(BONEID_0)] * POSITION;
#else
	POS4 pos = WORLDVIEWPROJ * BONE * POSITION;
#endif
#else
    POS4 pos = WORLDVIEWPROJ * POSITION;
#endif

    gl_Position = pos;

int frameIndex = int((COLOR.a*255.0) + 0.5);
uv.xy = (TEXCOORD_0.xy * BANNER_UV_OFFSETS_AND_SCALES[frameIndex].zw) + BANNER_UV_OFFSETS_AND_SCALES[frameIndex].xy;
uv.zw = (TEXCOORD_0.xy * BANNER_UV_OFFSETS_AND_SCALES[0].zw) + BANNER_UV_OFFSETS_AND_SCALES[0].xy;

#ifndef DISABLE_TINTING
	color = BANNER_COLORS[frameIndex];
	color.a = 1.0;
	if (frameIndex > 0) {
		color.a = 0.0;
	}
#endif

#ifdef ENABLE_LIGHT
    float L = lightIntensity();

	float factor = TILE_LIGHT_COLOR.b-TILE_LIGHT_COLOR.r;
	light = vec4(L*vec3(1.0-2.8*factor,1.0-2.7*factor,1.0),1.0);
	light.rgb *= vec3(1.0) + FOG_COLOR.rgb*0.3;

#endif

#ifdef ENABLE_FOG

// detections
bool end = detectEnd();
bool nether = detectNether();
bool underWater = detectUnderwater();
float rainFactor = detectRain(underWater);

// nether,end,underwater tint
if(nether){light.rgb *= TILE_LIGHT_COLOR.x*vec3(1.4,0.96,0.9);}
if(end){
    light.rgb *= vec3(2.1,1.5,2.3);
    fogColor.rgb = vec3(0.16,0.06,0.2);
}
if(underWater){
    light.rgb *= vec3(0.5,1.4,1.6);
    #ifndef DISABLE_TINTING
        light.rgb *= 0.8;
    #endif
}

if(rainFactor > 0.0){light.rgb *= 1.0-rainFactor*0.3;}
	
    // horizon color
    vec3 newFog = getHorizonCol(rainFactor);
    newFog = getHorizonEdgeCol(newFog,rainFactor);
    if(underWater){newFog = getUnderwaterCol();}

    float len = pos.z/RENDER_DISTANCE;

    mistColor = renderMist(newFog, len, TILE_LIGHT_COLOR.x, rainFactor, nether,underWater,end);
    fogColor = renderFog(newFog, len , nether);

#endif //ENABLE_FOG
}