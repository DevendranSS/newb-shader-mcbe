// __multiversion__

#include "vertexVersionCentroidUV.h"

#include "uniformWorldConstants.h"
#include "uniformEntityConstants.h"
#include "uniformPerFrameConstants.h"

#include "utilities/detectors.glsl"
#include "config_utilities/sky.h"
#include "config_utilities/global.h"

#ifdef USE_SKINNING
#include "uniformAnimationConstants.h"
#endif

#line 13

attribute mediump vec4 POSITION;
attribute vec2 TEXCOORD_0;
attribute vec4 NORMAL;

#if defined(USE_SKINNING)

#ifdef MCPE_PLATFORM_NX
	attribute uint BONEID_0;
#else
	attribute float BONEID_0;
#endif

	varying lowp vec4 edgeMap;

#endif

#ifdef COLOR_BASED
	attribute vec4 COLOR;
	varying vec4 vertColor;
#endif

varying vec4 mistColor;
varying lowp vec4 wetRefl;
varying vec3 light;
varying float rainFactor;

#ifdef USE_OVERLAY
	// When drawing horses on specific android devices, overlay color ends up being garbage data.
	// Changing overlay color to high precision appears to fix the issue on devices tested
	varying highp vec4 overlayColor;
#endif

#ifdef TINTED_ALPHA_TEST
	varying float alphaTestMultiplier;
#endif

#ifdef GLINT
	varying vec2 layer1UV;
	varying vec2 layer2UV;
	varying vec4 tileLightColor;
	varying vec4 glintColor;
#endif

highp vec3 matmulxyz(highp mat4 w, highp vec4 p){
	return vec3(
		dot(vec4(w[0][0],w[1][0],w[2][0],w[3][0]),p),
		dot(vec4(w[0][1],w[1][1],w[2][1],w[3][1]),p),
		dot(vec4(w[0][2],w[1][2],w[2][2],w[3][2]),p)
	);
}

vec3 lighting(vec4 position, vec4 normal){

	float intensity;
	vec3 light;

	#ifdef FANCY
		highp vec3 N = normalize(matmulxyz(WORLD,normal));

		//take care of double sided polygons on materials without culling
		#ifdef FLIP_BACKFACES
			vec3 viewDir = normalize(matmulxyz(WORLD,position));
			N *= -sign(dot(N,viewDir));
		#endif

		N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light
		N.xz *= N.xz;

		intensity =  (0.5 + N.y*0.5)*(1.0-0.45) - N.x*0.1 + N.z*0.1 + 0.45;
		intensity *= intensity;
	#else
		intensity = (0.7+abs(NORMAL.y)*0.3)*(0.9+abs(NORMAL.x)*0.1);
	#endif

	intensity *= TILE_LIGHT_COLOR.b*TILE_LIGHT_COLOR.b*sun_intensity*1.3;

	#ifdef USE_OVERLAY
		intensity += OVERLAY_COLOR.a * 0.35;
	#endif

	float factor = TILE_LIGHT_COLOR.b-TILE_LIGHT_COLOR.r;
	light = intensity*vec3(1.0-2.8*factor,1.0-2.7*factor,1.0);
	light *= vec3(1.0) + FOG_COLOR.rgb*0.3;

	return light;
}

#ifdef GLINT
vec2 calculateLayerUV(float offset, float rotation) {
	vec2 uv = TEXCOORD_0-vec2(0.5);
	float rsin = sin(rotation);
	float rcos = cos(rotation);
	uv = mat2(rcos, -rsin, rsin, rcos) * uv;
	uv += vec2(offset+0.5,0.5);

	return uv * GLINT_UV_SCALE;
}
#endif
void main(){
	POS4 entitySpacePosition;
	POS4 entitySpaceNormal;

#ifdef USE_SKINNING
	#if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		entitySpacePosition = BONES[int(BONEID_0)] * POSITION;
		entitySpaceNormal = BONES[int(BONEID_0)] * NORMAL;
	#else
		entitySpacePosition = BONE * POSITION;
		entitySpaceNormal = BONE * NORMAL;
	#endif
#else
	entitySpacePosition = POSITION;
	entitySpaceNormal = NORMAL;
	entitySpaceNormal.w = 0.0;
#endif

	POS4 pos = WORLDVIEWPROJ * entitySpacePosition;

	gl_Position = pos;


#ifdef TINTED_ALPHA_TEST
	alphaTestMultiplier = OVERLAY_COLOR.a;
#endif

#ifdef COLOR_BASED
	vertColor = COLOR;
#endif
	
#ifdef USE_OVERLAY
	overlayColor = OVERLAY_COLOR;
#endif

#ifndef NO_TEXTURE
	uv = TEXCOORD_0;
#endif

#ifdef USE_UV_ANIM
	uv.xy = UV_ANIM.xy + (uv.xy * UV_ANIM.zw);
#endif

#ifdef GLINT
	glintColor = GLINT_COLOR;
	layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
	layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
	tileLightColor = TILE_LIGHT_COLOR;
#endif

#ifdef USE_SKINNING
	// don't do for small entities like item drops
	edgeMap = fract(vec4(uv.xy*128.0,uv.xy*256.0));
	edgeMap.x = float(edgeMap.x<0.5);
	edgeMap.y = float(edgeMap.y<0.5);
	edgeMap.z = float(edgeMap.z<0.5);
	edgeMap.w = float(edgeMap.w<0.5);

	edgeMap = 2.0*edgeMap - 1.0;
#endif

// detections
bool end = detectEnd();
bool nether = detectNether();
bool underWater = detectUnderwater();
rainFactor = detectRain();

// horizon color
vec3 newFog = getHorizonCol(rainFactor);
newFog = getHorizonEdgeCol(newFog,rainFactor);
if(underWater){newFog = getUnderwaterCol();}

float camDist = pos.z/RENDER_DISTANCE;

mistColor = renderMist(newFog, camDist, TILE_LIGHT_COLOR.x, rainFactor, nether,underWater,end);
vec4 fogColor = renderFog(newFog, camDist, nether);

// mix fog with mist
mistColor = mix(mistColor,vec4(fogColor.rgb,1.0),fogColor.a);

// lighting
light = lighting(entitySpacePosition, entitySpaceNormal);

// soft shadow
light *= 1.05-0.3*float(POSITION.y>0.0);

#ifndef UI_ENTITY
// nether,end,underwater tint
if(nether){
	light *= TILE_LIGHT_COLOR.x*vec3(1.4,0.96,0.9);
}
if(end){ 
	light *= vec3(2.1,1.5,2.3);
	fogColor.rgb = vec3(0.16,0.06,0.2);
}
if(underWater){
	light *= vec3(0.5,1.4,1.6);
	highp float t = TIME;
	float caustic = max(TILE_LIGHT_COLOR.x-0.46,0.0)*(0.5+0.5*sin(t + dot(POSITION.xyz,vec3(1.5)) ));
	light += (vec3(1.0)+1.5*underwaterBaseCol)*caustic;
}
#endif

// wet effect
wetRefl.a = 0.0;
if(rainFactor>0.0 && pos.z<24.0){
	highp vec3 wPos = matmulxyz(WORLD,entitySpacePosition);
	highp vec3 dir = matmulxyz(WORLD,entitySpaceNormal);

	float nrmY = dir.y/sqrt(dot(dir,dir));

	if(nrmY>0.0){
		float viewDirY = wPos.y/sqrt(dot(wPos,wPos));

		float cosR = nrmY*(1.0-abs(viewDirY));

		float fresnel = cosR*cosR;
		fresnel *= fresnel*cosR;

		wetRefl.rgb = newFog;
		wetRefl.a = fresnel*rainFactor*TILE_LIGHT_COLOR.y;
	}
}
}
