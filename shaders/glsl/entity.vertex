// __multiversion__

#include "vertexVersionCentroidUV.h"

#include "uniformWorldConstants.h"
#include "uniformEntityConstants.h"
#include "uniformPerFrameConstants.h"

#include "utilities/detectors.glsl"
#include "config_utilities/sky.h"
#include "config_utilities/mist_fog.h"
#include "config_utilities/global.h"

#ifdef USE_SKINNING
#include "uniformAnimationConstants.h"
#endif

#line 13

attribute mediump vec4 POSITION;
attribute vec2 TEXCOORD_0;
attribute vec4 NORMAL;

#if defined(USE_SKINNING)

#ifdef MCPE_PLATFORM_NX
	attribute uint BONEID_0;
#else
	attribute float BONEID_0;
#endif

#endif

#ifdef COLOR_BASED
	attribute vec4 COLOR;
	varying vec4 vertColor;
#endif

varying vec4 light;
varying vec4 mistColor;

#ifdef USE_OVERLAY
	// When drawing horses on specific android devices, overlay color ends up being garbage data.
	// Changing overlay color to high precision appears to fix the issue on devices tested
	varying highp vec4 overlayColor;
#endif

#ifdef TINTED_ALPHA_TEST
	varying float alphaTestMultiplier;
#endif

#ifdef GLINT
	varying vec2 layer1UV;
	varying vec2 layer2UV;
	varying vec4 tileLightColor;
	varying vec4 glintColor;
#endif

const float AMBIENT = 0.45;

const float XFAC = -0.1;
const float ZFAC = 0.1;

float lightIntensity(vec4 position, vec4 normal) {
#ifdef FANCY
	vec3 N = normalize( WORLD * normal ).xyz;

	N.y *= TILE_LIGHT_COLOR.w; //TILE_LIGHT_COLOR.w contains the direction of the light

	//take care of double sided polygons on materials without culling
	#ifdef FLIP_BACKFACES
		vec3 viewDir = normalize((WORLD * position).xyz);
		N *= -sign(dot(N, viewDir));
	#endif

	N.xz *= N.xz;

	float light =  (0.5 + N.y*0.5)*(1.0-AMBIENT) + N.x*XFAC + N.z*ZFAC + AMBIENT;

	float lit = TILE_LIGHT_COLOR.b*TILE_LIGHT_COLOR.b*sun_intensity*1.3;

	return light*light*lit;

#else
	float lit = TILE_LIGHT_COLOR.b*TILE_LIGHT_COLOR.b*sun_intensity*1.3;
	return lit*(0.7+abs(NORMAL.y)*0.3)*(0.9+abs(NORMAL.x)*0.1);

#endif
}

#ifdef GLINT
vec2 calculateLayerUV(float offset, float rotation) {
	vec2 uv = TEXCOORD_0;
	uv -= 0.5;
	float rsin = sin(rotation);
	float rcos = cos(rotation);
	uv = mat2(rcos, -rsin, rsin, rcos) * uv;
	uv.x += offset;
	uv += 0.5;

	return uv * GLINT_UV_SCALE;
}
#endif

void main()
{
	POS4 entitySpacePosition;
	POS4 entitySpaceNormal;

#ifdef USE_SKINNING
	#if defined(LARGE_VERTEX_SHADER_UNIFORMS)
		entitySpacePosition = BONES[int(BONEID_0)] * POSITION;
		entitySpaceNormal = BONES[int(BONEID_0)] * NORMAL;
	#else
		entitySpacePosition = BONE * POSITION;
		entitySpaceNormal = BONE * NORMAL;
	#endif
#else
	entitySpacePosition = POSITION * vec4(1, 1, 1, 1);
	entitySpaceNormal = NORMAL * vec4(1, 1, 1, 0);
#endif

	POS4 pos = WORLDVIEWPROJ * entitySpacePosition;
	gl_Position = pos;

	float L = lightIntensity(entitySpacePosition, entitySpaceNormal);

#ifdef USE_OVERLAY
	L += OVERLAY_COLOR.a * 0.35;
#endif

#ifdef TINTED_ALPHA_TEST
	alphaTestMultiplier = OVERLAY_COLOR.a;
#endif

	float factor = TILE_LIGHT_COLOR.b-TILE_LIGHT_COLOR.r;
	light = vec4(L*vec3(1.0-2.8*factor,1.0-2.7*factor,1.0),1.0);
	light.rgb *= vec3(1.0) + FOG_COLOR.rgb*0.3;

#ifdef COLOR_BASED
	vertColor = COLOR;
#endif
	
#ifdef USE_OVERLAY
	overlayColor = OVERLAY_COLOR;
#endif

#ifndef NO_TEXTURE
	uv = TEXCOORD_0;
#endif

#ifdef USE_UV_ANIM
	uv.xy = UV_ANIM.xy + (uv.xy * UV_ANIM.zw);
#endif

#ifdef GLINT
	glintColor = GLINT_COLOR;
	layer1UV = calculateLayerUV(UV_OFFSET.x, UV_ROTATION.x);
	layer2UV = calculateLayerUV(UV_OFFSET.y, UV_ROTATION.y);
	tileLightColor = TILE_LIGHT_COLOR;
#endif

// soft shadow
light.rgb *= 0.85-0.24*float(POSITION.y>0.0);

// detections
bool end = detectEnd();
bool nether = detectNether();
bool underWater = detectUnderwater();
float rainFactor = detectRain(underWater);

// horizon color
vec3 newFog = getHorizonCol(rainFactor);
newFog = getHorizonEdgeCol(newFog,rainFactor);
if(underWater){newFog = getUnderwaterCol();}

float camDist = pos.z/RENDER_DISTANCE;

mistColor = renderMist(newFog, camDist, TILE_LIGHT_COLOR.x, rainFactor, nether,underWater,end);
vec4 fogColor = renderFog(newFog, camDist, nether);

// mix fog with mist (need to do this in a proper and efficient way)
mistColor.a = min(mistColor.a + fogColor.a*(1.0-mistColor.a),1.0);
mistColor.rgb = mix(mistColor.rgb,fogColor.rgb,fogColor.a);

// nether,end,underwater tint
if(nether){
	light.rgb *= TILE_LIGHT_COLOR.x*vec3(1.4,0.96,0.9);
}
if(end){ 
	light.rgb *= vec3(2.1,1.5,2.3);
	fogColor.rgb = vec3(0.16,0.06,0.2);
}
if(underWater){
	light.rgb *= vec3(0.5,1.4,1.6);
}

}